/**
 * @file Defines Vote system functions for Spark
 * @author guillain SANCHEZ <guillain.sanchez@gmail.com>
 * @license LGPL-3.0
 */

// Load config
var config = require('./config');
var redis = require("redis");
var client = redis.createClient({detect_buffers: true});

printres = function (bot,trigger) {
  var res = 'Result for the current participation: \n';
  var total = 'Total result: \n';
  var counts = {};

  client.get(config.vote.storage, function (err, votes) {
    console.log('printres votes:'+votes);

    if (votes.length == 0) { return 'No vote recorded'; }
    else {
      votesArr = votes.split(",");
      for (i = 0; i < votesArr.length; i++) {
        console.log(votesArr[i]);

        // Print participant result
        res += '- '+votesArr[i]+'\n';
      }
    }
  });
  console.log('res:'+res);
  return res;
}
/*
        // Total
        vote = votesArr[i].split(":");
        var num = vote[1];
        counts[num] = counts[num] ? counts[num]+1 : 1;
        console.log('>>> num:'+num+', counts[num]:'+counts[num]);
      }

      console.log('>>> counts:'+counts);
      console.log('>>> counts[num]:'+counts[num]);

      for (i=0; i < counts.length; i++){
        console.log('>>> i:'+i+', counts[i]:'+counts[i]);
        total += '- '+i+':'+counts[i]+'\n'; //:'+key(counts[i])+'\n';
      }
      return res+'\n'+total;
    }
  });
*/

exports.vote = function (bot, trigger) {
  // if help cmd
  if (/help/i.test(trigger.args['1'])) {
    bot.say(config.vote.help);

  // if (print) result cmd
  } else if (/result/i.test(trigger.args['1'])) {
    bot.say(printres(bot,trigger));

  // if flush cmd
  } else if (/flush/i.test(trigger.args['1'])) {
    resStore = bot.forget(config.vote.storage);
    client.del(config.vote.storage, redis.print);
    bot.say('Flush done');

  // if result posted
  } else if (trigger.args['1']) {
    if (/^(yes|no|later)$/i.test(trigger.args['1'])) {
      var voteStore = bot.recall(config.vote.storage);
      // Check if it\'s first vote, if yes add the vote
      if (voteStore) {
        // Check if the guy has already voted
        var votes = voteStore.split(",");
        for (i = 0; i < votes.length; i++) {
          console.log('>>> '+i+':'+votes[i]);
          vote = votes[i].split(":");
          if (vote[0] == trigger.personEmail) { 
            bot.say('You have already voted but thanks for your interest');
            return;
          }
        }
        // Add the vote
        voteStore += ','+trigger.personEmail+':'+trigger.args['1'];
      } else {
        // Add the first vote
        voteStore = trigger.personEmail+':'+trigger.args['1'];
      }
      resStore = bot.store(config.vote.storage, voteStore);
      client.set(config.vote.storage, voteStore, redis.print);
      bot.say('Thanks for your vote! \n\n'+printres(bot,trigger));
    } else {
      bot.say('Wrong reply \n\n'+config.vote.help);
    }
  } else {
    phrase  = config.vote.message+'\n';
    phrase += 'Thanks to reply by chat with the corresponding word \n\n';
    phrase += 'i.e.: \\v yes \n';
    bot.say(phrase);
  }
};


